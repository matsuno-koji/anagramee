{"version":3,"sources":["components/editor/wordpanel.tsx","components/editor/preview.tsx","components/editor/editor.tsx","pages/editPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Panel","styled","div","WordContainer","p","WordPanel","props","returnIcon","displayWord","element","isLayout","word","isReturn","Oneline","Preview","lines","map","line","index","Spacer","Editor","text","horizontalLength","verticalLength","elements","lineNum","extractTargetLineWords","devideLine","split","Math","floor","key","lfNum","repeat","item","getLayoutItems","initialize","theme","panelConf","rowLength","useState","items","setItems","previewText","setText","useEffect","Object","keys","joinText","GridContext","onChange","sourceId","sourceIndex","targetIndex","targetId","result","swap","move","GridDropZone","id","editorConf","GridItem","filter","PanelConf","height","width","EditorWrpaeer","PanelBoard","PanelBoardBackground","BtnWrapper","PanelBoardContainer","ContentWrapper","EditPage","setTheme","themeValue","setThemeValue","boxesPerRow","rowHeight","style","AppBar","position","Toolbar","Typography","variant","className","Container","maxWidth","TextField","event","target","value","size","label","fullWidth","Button","onClick","color","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b01548f8.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { WordPanelElement } from '../../types/editor'\nimport KeyboarReturnIcon from '@material-ui/icons/KeyboardReturn'\nconst Panel = styled.div`\n  display: flex;\n  align-items: center;\n  width: 39px;\n  height: calc(100% - 1px);\n  margin: 1px;\n  box-sizing: border-box;\n  cursor: grab;\n  background-color: rgba(245,245,245,0.7);\n  &:active {\n    cursor: grabbing;\n  }\n  box-shadow: -1px -3px 2px 2px rgba(10,10,10,0.1) inset, 0px 0px 0px 1px rgba(10,10,10,0.02) inset;\n`\nconst WordContainer = styled.p`\n  width: 100%;\n  text-align: center;\n  font-size: 1.5rem;\n`\ninterface Props {\n  element: WordPanelElement\n}\n\nexport const WordPanel: React.FC<Props> = (props) => {\n  const returnIcon = <KeyboarReturnIcon />\n  const displayWord = isReturn(props.element) ? returnIcon : props.element.word\n  return (\n  <Panel>\n    <WordContainer>\n      {displayWord}\n    </WordContainer>\n  </Panel>\n  )\n}\n\nfunction isReturn(element: WordPanelElement) {\n  if (!element.isLayout) {\n    return false\n  }\n  if (element.word === 'n') {\n    return true\n  }\n  return false\n}","import React from \"react\"\nimport styled from \"styled-components\"\n\ninterface Props {\n  lines: string[]\n}\n\nconst Oneline = styled.p`\n  margin: 0;\n  padding: 0;\n  font-size: 1.6rem;\n  font-family: 'Noto Serif JP', serif;\n`\nexport const Preview: React.FC<Props> = (props) => {\n  return (\n    <>\n      {props.lines.map((line, index) => {\n        return <Oneline key={`preview_text_line_${index}`}>{line}</Oneline>\n      })}\n    </>\n  )\n}\n","import React, { useEffect, useState } from \"react\"\nimport { WordPanel } from \"./wordpanel\"\nimport { WordPanelElement } from \"../../types/editor\"\nimport { Preview } from \"../editor/preview\"\nimport styled from \"styled-components\"\nimport {\n  GridContextProvider,\n  GridDropZone,\n  GridItem,\n  swap,\n  move\n} from \"react-grid-dnd\"\n\nconst Spacer = styled.div`\n  width: 100%;\n  height: 16px;\n`\ninterface Props {\n  theme: string\n  panelConf: {\n    height: number,\n    width: number,\n    rowLength: number,\n    verticalLength: number\n  }\n  editorConf: {\n    boxesPerRow: number\n    rowHeight: number\n    style?: React.CSSProperties\n  }\n}\n\ninterface Lines {\n  [index: string]: WordPanelElement[]\n}\n\nexport const Editor: React.FC<Props> = (props) => {\n  const lines = initialize(props.theme, props.panelConf.rowLength, props.panelConf.verticalLength)\n  const [items, setItems] = useState(lines)\n  const [previewText, setText] = useState(props.theme.split(\"n\"))\n  useEffect(() => {\n    setItems(lines)\n  }, [props.theme])\n\n  useEffect(() => {\n    const text = joinText(items)\n    setText(text)\n  }, [items])\n\n  const onChange = (\n    sourceId: string,\n    sourceIndex: number,\n    targetIndex: number,\n    targetId?: string\n  ) => {\n    if (targetId) {\n      const result = move(\n        items[sourceId],\n        items[targetId],\n        sourceIndex,\n        targetIndex\n      );\n      setItems({\n        ...items,\n        [sourceId]: result[0],\n        [targetId]: result[1]\n      })\n\n      return\n    }\n    const result = swap(items[sourceId], sourceIndex, targetIndex)\n    return setItems({\n      ...items,\n      [sourceId]: result\n    })\n  }\n\n  return(\n    <>\n      <GridContextProvider onChange={onChange}>\n        {Object.keys(items).map((key) => (\n            <GridDropZone\n              key={key}\n              id={key}\n              {...props.editorConf}\n            >\n              {items[key].map((item) => (\n                <GridItem key={item.key}>\n                  <WordPanel element={item} />\n                </GridItem>\n              ))}\n            </GridDropZone>\n        ))}\n      </GridContextProvider>\n      <Spacer/>\n      <Preview lines={previewText} />\n    </>\n  )\n}\n\n//文章の初期化\nfunction initialize(text: string, horizontalLength: number, verticalLength: number): Lines {\n  const words = text.split(\"\")\n  const elements: WordPanelElement[] = words.map( (word, index) => {\n    const line = Math.floor(index / horizontalLength)\n    return {key: `${index}`, word: `${word}`, line: line, isLayout: false}\n  })\n  const lines = devideLine(elements, verticalLength)\n  lines['layoutItems'] = getLayoutItems(5)\n  return lines\n}\n\n//レイアウト用アイテムの取得\nfunction getLayoutItems(lfNum: number): WordPanelElement[] {\n  let preItem = \"n\".repeat(lfNum)\n  const splitItems = preItem.split(\"\")\n  const elements = splitItems.map((item, index) => {\n    return {key: `layout_item_${index}`, word: `${item}`, line: 1, isLayout: true}\n  })\n  return elements\n}\n\n//ラインでグループ分け\nfunction devideLine(elements: WordPanelElement[], verticalLength: number): Lines {\n  const lines: Lines = {}\n  for(let lineNum = 0; lineNum < verticalLength; lineNum++) {\n    lines[`line_${lineNum}`] = extractTargetLineWords(elements, lineNum)\n  }\n  return lines\n}\n\nfunction extractTargetLineWords(elements: WordPanelElement[], line: number) {\n  return elements.filter(element => {\n    return element.line === line\n  })\n}\n\n//入れ替えたテキストを合体\nfunction joinText(elements: Lines): string[] {\n  let text = \"\"\n  Object.keys(elements).map( (key) => {\n    if(key === 'layoutItems') {\n      return\n    }\n    elements[key].map( element => (\n      text = text + element.word\n    ))\n  })\n  //TODO:改行文字は共通化すべき\n  const textItems = text.split('n')\n  return textItems\n}","import React, { useState } from 'react'\nimport { Editor } from \"../components/editor/editor\"\nimport styled from \"styled-components\"\n\nimport { \n  AppBar,\n  Toolbar,\n  Typography,\n  Container,\n  TextField,\n  Button,\n} from '@material-ui/core'\n\n//パネル設定\nconst PanelConf = {\n  height: 50,\n  width: 40,\n  rowLength: 15,\n  verticalLength: 5,\n}\n\nconst EditorWrpaeer = styled.div`\n  position: absolute;\n  width: ${PanelConf.width * PanelConf.rowLength + 1}px;\n`\nconst PanelBoard = styled.div`\n  position: relative;\n  width: ${PanelConf.width * PanelConf.rowLength + 1}px;\n  height: ${PanelConf.height * PanelConf.verticalLength + 1 + PanelConf.height}px;\n  border: 1px solid orange;\n`\nconst PanelBoardBackground = styled.div`\n  position: absolute;\n  width: ${PanelConf.width * PanelConf.rowLength + 1}px;\n  height: ${PanelConf.height * PanelConf.verticalLength + 1 + PanelConf.height}px;\n  z-index: -1;\n  background-image: linear-gradient(#000 1px, transparent 0),\n                    linear-gradient(90deg, #000 1px, transparent 0);\n  background-size: ${PanelConf.width}px ${PanelConf.height}px;\n`\nconst BtnWrapper = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  margin: 16px 0px;\n`\n\nconst PanelBoardContainer = styled.div`\n  display: flex;\n  justify-content: center;\n`\n\nconst Spacer = styled.div`\n  width: 100%;\n  height: 16px;\n`\n\nconst ContentWrapper = styled.div`\n  padding-top: 32px;\n  padding-bottom: 32px;\n`\n\nexport function EditPage() {\n  const [theme, setTheme] = useState(\"\")\n  const [themeValue, setThemeValue] = useState(\"\")\n  const editorConf = {\n    boxesPerRow: PanelConf.rowLength,\n    rowHeight: PanelConf.height,\n    style: { height: `${PanelConf.height}px`}\n  }\n\n  const handleThemeInputOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeValue(event.target.value)\n  }\n\n  const handleSetBtnOnClick = () => {\n    setTheme(themeValue)\n  }\n  return (\n    <>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className=\"classes.title\">\n            アナグラムエディタ\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <ContentWrapper>\n        <Container maxWidth=\"sm\">\n          <TextField\n            onChange={handleThemeInputOnChange}\n            id=\"theme_input\"\n            size=\"medium\"\n            label=\"お題\"\n            fullWidth\n          />\n          <BtnWrapper>\n            <Button\n              onClick={handleSetBtnOnClick}\n              variant=\"contained\"\n              color=\"primary\"\n            >\n              お題をボードにセットする\n            </Button>\n          </BtnWrapper>\n        </Container>\n        <Spacer/>\n        <Container maxWidth=\"md\">\n          <PanelBoardContainer>\n            <PanelBoard>\n              <PanelBoardBackground />\n              <EditorWrpaeer>\n                <Editor theme={theme} panelConf={PanelConf} editorConf={editorConf} />\n              </EditorWrpaeer>\n            </PanelBoard>\n          </PanelBoardContainer>\n        </Container>\n      </ContentWrapper>\n    </>\n  )\n}","import React from 'react';\nimport './App.css';\nimport { EditPage } from './pages/editPage'\n\nfunction App() {\n  return(\n    <>\n      <EditPage />\n    </>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}