{"version":3,"sources":["components/editor/wordpanel.tsx","components/editor/preview.tsx","components/editor/editor.tsx","pages/editPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Panel","styled","div","WordContainer","p","WordPanel","props","returnIcon","displayWord","element","isLayout","word","isReturn","Oneline","Preview","lines","map","line","index","Spacer","Editor","text","horizontalLength","verticalLength","elements","lineNum","extractTargetLineWords","devideLine","split","Math","floor","key","Object","keys","length","getLayoutItems","initialize","theme","panelConf","rowLength","useState","items","setItems","previewText","setText","useEffect","joinText","GridContext","onChange","sourceId","sourceIndex","targetIndex","targetId","result","swap","move","boxesPerRow","lastLineIndex","isOutOfFrame","editorConf","isLineBreakRequired","lineBrokenItems","lastOfLineElement","pop","undefined","unshift","lineBreak","GridDropZone","id","item","GridItem","lfNum","repeat","filter","EditPage","PanelConf","mediaQuery","isDesktop","height","width","isMobile","getPanelConf","useMediaQuery","query","console","log","EditorWrpaeer","PanelBoard","PanelBoardBackground","LayoutItemBoardBackground","BtnWrapper","PanelBoardContainer","ContentWrapper","defaultTheme","setTheme","themeValue","setThemeValue","rowHeight","style","AppBar","position","Toolbar","Typography","variant","className","Container","maxWidth","TextField","event","target","value","size","label","fullWidth","Button","onClick","color","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Wrapper","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7dfb6977.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { WordPanelElement } from '../../types/editor'\nimport KeyboarReturnIcon from '@material-ui/icons/KeyboardReturn'\nconst Panel = styled.div`\n  display: flex;\n  align-items: center;\n  width: 39px;\n  height: calc(100% - 1px);\n  margin: 1px;\n  box-sizing: border-box;\n  cursor: grab;\n  background-color: rgba(245,245,245,0.7);\n  &:active {\n    cursor: grabbing;\n  }\n  box-shadow: -1px -3px 2px 2px rgba(10,10,10,0.1) inset, 0px 0px 0px 1px rgba(10,10,10,0.02) inset;\n`\nconst WordContainer = styled.p`\n  width: 100%;\n  text-align: center;\n  font-size: 1.5rem;\n`\ninterface Props {\n  element: WordPanelElement\n}\n\nexport const WordPanel: React.FC<Props> = (props) => {\n  const returnIcon = <KeyboarReturnIcon />\n  const displayWord = isReturn(props.element) ? returnIcon : props.element.word\n  return (\n  <Panel>\n    <WordContainer>\n      {displayWord}\n    </WordContainer>\n  </Panel>\n  )\n}\n\nfunction isReturn(element: WordPanelElement) {\n  if (!element.isLayout) {\n    return false\n  }\n  if (element.word === 'n') {\n    return true\n  }\n  return false\n}","import React from \"react\"\nimport styled from \"styled-components\"\n\ninterface Props {\n  lines: string[]\n}\n\nconst Oneline = styled.p`\n  margin: 0;\n  padding: 0;\n  font-size: 1.6rem;\n  font-family: 'Noto Serif JP', serif;\n`\nexport const Preview: React.FC<Props> = (props) => {\n  return (\n    <>\n      {props.lines.map((line, index) => {\n        return <Oneline key={`preview_text_line_${index}`}>{line}</Oneline>\n      })}\n    </>\n  )\n}\n","import React, { useEffect, useState } from \"react\"\nimport { WordPanel } from \"./wordpanel\"\nimport { WordPanelElement } from \"../../types/editor\"\nimport { Preview } from \"../editor/preview\"\nimport styled from \"styled-components\"\nimport {\n  GridContextProvider,\n  GridDropZone,\n  GridItem,\n  swap,\n  move\n} from \"react-grid-dnd\"\nimport { keys } from \"@material-ui/core/styles/createBreakpoints\"\n\nconst Spacer = styled.div`\n  width: 100%;\n  height: 16px;\n`\ninterface Props {\n  theme: string\n  panelConf: {\n    height: number,\n    width: number,\n    rowLength: number,\n    verticalLength: number\n  }\n  editorConf: {\n    boxesPerRow: number\n    rowHeight: number\n    style?: React.CSSProperties\n  }\n}\n\ninterface Line {\n  index: number,\n  elements: WordPanelElement[]\n  isLayout: boolean,\n}\n\ninterface Lines {\n  [id: string]: Line\n}\n\nexport const Editor: React.FC<Props> = (props) => {\n  const lines = initialize(props.theme, props.panelConf.rowLength, props.panelConf.verticalLength)\n  const [items, setItems] = useState(lines)\n  const [previewText, setText] = useState(props.theme.split(\"n\"))\n  useEffect(() => {\n    setItems(lines)\n  }, [props.theme])\n\n  useEffect(() => {\n    const text = joinText(items)\n    setText(text)\n  }, [items])\n\n  const onChange = (\n    sourceId: string,\n    sourceIndex: number,\n    targetIndex: number,\n    targetId?: string\n  ) => {\n    if (targetId) {\n      const result = move(\n        items[sourceId].elements,\n        items[targetId].elements,\n        sourceIndex,\n        targetIndex\n      );\n      items[sourceId].elements = result[0]\n      items[targetId].elements = result[1]\n      if (isOutOfFrame(items, props.editorConf.boxesPerRow)) {\n        return\n      }\n      if (isLineBreakRequired(items, props.editorConf.boxesPerRow)) {\n        const lineBrokenItems = lineBreak(items, props.editorConf.boxesPerRow)\n        setItems({...lineBrokenItems})\n        return\n      }\n      setItems({...items})\n      return\n    }\n    const result = swap(items[sourceId].elements, sourceIndex, targetIndex)\n    items[sourceId].elements = result\n    return setItems({...items})\n  }\n\n  return(\n    <>\n      <GridContextProvider onChange={onChange}>\n        {Object.keys(items).map((key) => (\n            <GridDropZone\n              key={key}\n              id={key}\n              {...props.editorConf}\n            >\n              {items[key].elements.map((item) => (\n                <GridItem key={item.key}>\n                  <WordPanel element={item} />\n                </GridItem>\n              ))}\n            </GridDropZone>\n        ))}\n      </GridContextProvider>\n      <Spacer/>\n      <Preview lines={previewText} />\n    </>\n  )\n}\n\n//文章の初期化\nfunction initialize(text: string, horizontalLength: number, verticalLength: number): Lines {\n  const words = text.split(\"\")\n  const elements: WordPanelElement[] = words.map( (word, index) => {\n    const line = Math.floor(index / horizontalLength)\n    return {key: `${index}`, word: `${word}`, line: line, isLayout: false}\n  })\n  const lines = devideLine(elements, verticalLength)\n  lines['layoutItems'] = {index: Object.keys(lines).length + 1, elements: getLayoutItems(5), isLayout: true}\n  return lines\n}\n\n//レイアウト用アイテムの取得\nfunction getLayoutItems(lfNum: number): WordPanelElement[] {\n  let preItem = \"n\".repeat(lfNum)\n  const splitItems = preItem.split(\"\")\n  const elements = splitItems.map((item, index) => {\n    return {key: `layout_item_${index}`, word: `${item}`, line: 1, isLayout: true}\n  })\n  return elements\n}\n\n//ラインでグループ分け\nfunction devideLine(elements: WordPanelElement[], verticalLength: number): Lines {\n  const lines: Lines = {}\n  for(let lineNum = 0; lineNum < verticalLength; lineNum++) {\n    lines[`line_${lineNum}`] = {index: lineNum, elements: extractTargetLineWords(elements, lineNum), isLayout: false}\n  }\n  return lines\n}\n\nfunction extractTargetLineWords(elements: WordPanelElement[], line: number) {\n  return elements.filter(element => {\n    return element.line === line\n  })\n}\n\n//入れ替えたテキストを合体\nfunction joinText(lines: Lines): string[] {\n  let text = \"\"\n  Object.keys(lines).map( (key) => {\n    if(lines[key].isLayout) {\n      return\n    }\n    lines[key].elements.map( element => (\n      text = text + element.word\n    ))\n  })\n  //TODO:改行文字は共通化すべき\n  const textItems = text.split('n')\n  return textItems\n}\n\nfunction isOutOfFrame(lines: Lines, boxesPerRow: number): boolean {\n  const keys = Object.keys(lines)\n  const lastLineIndex = keys.length\n  let result = false\n  keys.map((key) => {\n    if(lines[key].index === lastLineIndex) {\n      result = lines[key].elements.length >= boxesPerRow\n    }\n  })\n  return result\n}\n\nfunction isLineBreakRequired(lines: Lines, boxesPerRow: number): boolean {\n  let result = false\n  Object.keys(lines).map((key) => {\n    if (lines[key].elements.length >= boxesPerRow) {\n      result = true\n    }\n  })\n  return result\n}\n\nfunction lineBreak(lines: Lines, boxesPerRow: number): Lines {\n  const keys = Object.keys(lines)\n  keys.map((key, index) => {\n      if (lines[key].elements.length >= boxesPerRow) {\n        const lastOfLineElement = lines[key].elements.pop()\n        if (lastOfLineElement === undefined) {\n          return\n        }\n        lines[keys[index + 1]].elements.unshift(lastOfLineElement)\n      }\n  })\n  return lines\n}","import React, { useState } from 'react'\nimport { Editor } from \"../components/editor/editor\"\nimport styled from \"styled-components\"\nimport { useMediaQuery } from \"react-responsive\"\nimport { \n  AppBar,\n  Toolbar,\n  Typography,\n  Container,\n  TextField,\n  Button,\n} from '@material-ui/core'\n\ninterface PanelConf {\n  height: number\n  width: number\n  rowLength: number,\n  verticalLength: number\n}\n\ninterface MediaQuery {\n  isDesktop: boolean\n  isMobile: boolean\n}\n\nexport function EditPage() {\n//パネル設定\nconst mediaQuery = {\n  isDesktop: useMediaQuery({ query: '(min-device-width: 768px)'}),\n  isMobile: useMediaQuery({ query: '(min-device-width: 375px)'})\n}\nconst PanelConf = getPanelConf(mediaQuery)\nconsole.log(PanelConf)\n\nconst EditorWrpaeer = styled.div`\n  position: absolute;\n  width: ${PanelConf.width * PanelConf.rowLength + 1 + PanelConf.width}px;\n`\nconst PanelBoard = styled.div`\n  position: relative;\n  width: ${PanelConf.width * PanelConf.rowLength + 1}px;\n  height: ${PanelConf.height * PanelConf.verticalLength + 1 + PanelConf.height}px;\n  border: 1px solid orange;\n`\nconst PanelBoardBackground = styled.div`\n  position: absolute;\n  width: ${PanelConf.width * PanelConf.rowLength + 1}px;\n  height: ${PanelConf.height * PanelConf.verticalLength + 1}px;\n  z-index: -1;\n  background-image: linear-gradient(#000 1px, transparent 0),\n                    linear-gradient(90deg, #000 1px, transparent 0);\n  background-size: ${PanelConf.width}px ${PanelConf.height}px;\n`\n\nconst LayoutItemBoardBackground = styled.div`\n  position: absolute;\n  top: ${PanelConf.height * PanelConf.verticalLength}px;\n  left: 0;\n  width: ${PanelConf.width * PanelConf.rowLength + 1}px;\n  height: ${PanelConf.height + 1}px;\n  z-index: -1;\n  background-image: linear-gradient(#000 1px, transparent 0),\n  linear-gradient(90deg, #000 1px, transparent 0);\n  background-size: ${PanelConf.width}px ${PanelConf.height}px;\n  background-color: #bdbdbd;\n`\nconst BtnWrapper = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  margin: 16px 0px;\n`\n\nconst PanelBoardContainer = styled.div`\n  display: flex;\n  justify-content: center;\n`\n\nconst Spacer = styled.div`\n  width: 100%;\n  height: 16px;\n`\n\nconst ContentWrapper = styled.div`\n  padding-top: 32px;\n  padding-bottom: 32px;\n`\n\n  const defaultTheme = \"お題をセットしてアナグラムを作りましょう！\"\n  const [theme, setTheme] = useState(defaultTheme)\n  const [themeValue, setThemeValue] = useState(defaultTheme)\n  const editorConf = {\n    boxesPerRow: PanelConf.rowLength + 1,\n    rowHeight: PanelConf.height,\n    style: { height: `${PanelConf.height}px`}\n  }\n\n  const handleThemeInputOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeValue(event.target.value)\n  }\n\n  const handleSetBtnOnClick = () => {\n    setTheme(themeValue)\n  }\n  return (\n    <>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className=\"classes.title\">\n            アナグラムエディタ\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <ContentWrapper>\n        <Container maxWidth=\"sm\">\n          <TextField\n            onChange={handleThemeInputOnChange}\n            id=\"theme_input\"\n            size=\"medium\"\n            label=\"お題\"\n            fullWidth\n          />\n          <BtnWrapper>\n            <Button\n              onClick={handleSetBtnOnClick}\n              variant=\"contained\"\n              color=\"primary\"\n            >\n              お題をボードにセットする\n            </Button>\n          </BtnWrapper>\n        </Container>\n        <Spacer/>\n        <Container maxWidth=\"md\">\n          <PanelBoardContainer>\n            <PanelBoard>\n              <PanelBoardBackground />\n              <LayoutItemBoardBackground />\n              <EditorWrpaeer>\n                <Editor theme={theme} panelConf={PanelConf} editorConf={editorConf} />\n              </EditorWrpaeer>\n            </PanelBoard>\n          </PanelBoardContainer>\n        </Container>\n      </ContentWrapper>\n    </>\n  )\n}\n\nfunction getPanelConf(mediaQuery: MediaQuery): PanelConf {\n  //PCの時\n  if (mediaQuery.isDesktop) {\n    return {\n      height: 50,\n      width: 40,\n      rowLength: 15,\n      verticalLength: 5,\n    }\n  }\n  //スマホの時\n  if (mediaQuery.isMobile) {\n    return {\n      height: 50,\n      width: 40,\n      rowLength: 7,\n      verticalLength: 10\n    }\n  }\n  //デフォルト\n  return {\n    height: 50,\n    width: 40,\n    rowLength: 15,\n    verticalLength: 5,\n  }\n}","import React from 'react';\nimport { EditPage } from './pages/editPage'\nimport styled from 'styled-components'\n\nconst Wrapper = styled.div`\n  width: 100vw;\n  overflow: hidden;\n`\nfunction App() {\n  return(\n    <>\n      <EditPage />\n    </>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport styled from 'styled-components'\n\nconst Wrapper = styled.div`\n  width: 100vw;\n  overflow: hidden;\n`\nReactDOM.render(\n  <React.StrictMode>\n    <Wrapper>\n      <App />\n    </Wrapper>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}